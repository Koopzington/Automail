0. Just do your thing. I can deal with code submissions pretty quickly.

---

As with any project, follow its established coding style.

Your contributions may still be accepted if you don't but there will be less cleanup job for me.

1. Indent with tabs, not spaces

2. Opening curly { are on the same line as control flow statements

3. There's no space between control flow statements and the opening curly {

4. If statements should always have curly brackets {}, even when trivial

5. Omit semicolons when possible

6. Conditionals can be split over multiple lines for clarity

--- example if statement, showing 1-6:

if(
	someTest()
	&& (
		useScripts.someModule
		|| useScripts.someOtherModule
	)
){
	counter++
}

---

7. Use double quotes, not single quotes.

8. Make HTML elements with the "create" function.

9. All usage of "innerHTML" should be avoided if possible (innerText, textContent), and if that's unavoidable, you MUST use DOMPurify.sanitize

10. If you need some caching, use localForage

11. Format your module using the "exportModule" syntax if possible (see src/HOWTO.js)

12. Don't import any external libraries. (see if you usecase can be covered by purify.js, localforage.js, anything in utilities.js, or src/utitilites/). Write it yourself if you really need it.

13. Avoid calling anilist code.
(permitted, for opening the list editor: document.getElementById("app").__vue__.$store.dispatch("medialistEditor/open",mediaID) )
(permitted, for loading other parts of the site from memory: document.getElementById("app").__vue__._router.push() BUT MAKE SURE IT FALLS BACK TO A REGULA LINK!)

14. All communication with the Anilist API must be done via the interfaces defined in src/graphql.js

15. Joke comments are permitted.

16. m4 and make are the only permitted pre-processing tools (Python scripts, using the standard library only, can be permitted)
